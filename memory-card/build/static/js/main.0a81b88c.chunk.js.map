{"version":3,"sources":["Scoreboard.js","Card.js","CardsGrid.js","SearchBar.js","Pokemon.png","Game.js","Gallery.js","App.js","index.js"],"names":["Scoreboard","props","score","highScore","maxScore","className","id","Card","handleGame","shuffle","cardId","imageSrc","onClick","src","alt","CardsGrid","cards","map","card","imageUrl","SearchBar","searchValue","handleSearch","onSearchValueChange","changeDifficulty","changeMode","mode","type","value","onChange","placeholder","aria-hidden","option","options","arrowClassName","controlClassName","defaultStartingCards","Game","startingDifficulty","setSearchValue","useState","setScore","setHighScore","cardsFound","setCardsFound","setCards","allCards","setAllCards","difficulty","setDifficulty","getRandom","arr","n","shuffled","i","length","j","Math","floor","random","slice","useEffect","search","a","fetch","json","then","response","newCards","allQueriedCards","forEach","newCard","push","numCardsInGrid","randomCards","cardsInGrid","randomCard","Logo","shuffledDefault","e","target","includes","tempCards","isShuffledValid","cardsFoundCopy","shuffledCards","Gallery","App","setMode","gameModeDifficulty","setGameModeDifficulty","modeDisplayed","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uRAceA,MAZf,SAAoBC,GAAO,IAClBC,EAA4BD,EAA5BC,MAAMC,EAAsBF,EAAtBE,UAAUC,EAAYH,EAAZG,SAEvB,OACE,sBAAKC,UAAU,aAAf,UACE,yCAAYH,KACZ,qBAAII,GAAG,YAAP,yBAAgCH,KAChC,6CAAgBC,SCOPG,MAdf,SAAcN,GAAO,IACZO,EAAsCP,EAAtCO,WAAWC,EAA2BR,EAA3BQ,QAAQC,EAAmBT,EAAnBS,OAAOC,EAAYV,EAAZU,SAMjC,OACE,qBAAKN,UAAU,OAAOO,QALxB,WACEJ,EAAWE,GACXD,EAAQC,IAGR,SACE,qBAAKG,IAAKF,EAAUG,IAAKJ,OCKhBK,MAbf,SAAmBd,GAAO,IACjBe,EAA4Bf,EAA5Be,MAAMR,EAAsBP,EAAtBO,WAAWC,EAAWR,EAAXQ,QAExB,OACE,qBAAKJ,UAAU,YAAf,SACGW,EAAMC,KAAI,SAACC,GAAD,OACT,cAAC,EAAD,CAAMP,SAAUO,EAAKC,SAA4BT,OAAQQ,EAAKR,OAAQD,QAASA,EAASD,WAAYA,GAAhEU,EAAKR,c,6BC0BlCU,MA9Bf,SAAmBnB,GAAO,IACjBoB,EAAiFpB,EAAjFoB,YAAYC,EAAqErB,EAArEqB,aAAaC,EAAwDtB,EAAxDsB,oBAAoBC,EAAoCvB,EAApCuB,iBAAiBC,EAAmBxB,EAAnBwB,WAAWC,EAAQzB,EAARyB,KAehF,OACE,sBAAKrB,UAAU,kBAAf,UACE,sBAAKC,GAAG,qBAAR,UACE,uBAAOA,GAAG,YAAYqB,KAAK,OAAOC,MAAOP,EAAaQ,SAAUN,EAAqBO,YAAY,uBACjG,wBAAQxB,GAAG,eAAeM,QAAS,WAAKU,EAAaD,IAArD,SACE,mBAAGhB,UAAU,sBAAsB0B,cAAY,cAGnD,cAAC,IAAD,CAAUF,SAjBG,SAACG,GACZN,IAASM,EAAOJ,QAClBH,EAAWO,EAAOJ,OACL,iBAATF,GACFF,MAa4BS,QAtBlB,CACd,cAAe,YAAa,gBAqBsBL,MAAOF,EACrDQ,eAAe,kBAAkBC,iBAAiB,oBAAoB9B,UAAU,mBC9BzE,MAA0B,oCCMnC+B,EAAwB,CAC5B,CAAC1B,OAAO,UAAUS,SAAS,4CAC3B,CAACT,OAAO,gBAAgBS,SAAS,kDACjC,CAACT,OAAO,WAAWS,SAAS,6CAC5B,CAACT,OAAO,WAAWS,SAAS,6CAC5B,CAACT,OAAO,WAAWS,SAAS,6CAC5B,CAACT,OAAO,WAAWS,SAAS,6CAC5B,CAACT,OAAO,WAAWS,SAAS,6CAC5B,CAACT,OAAO,UAAUS,SAAS,4CAC3B,CAACT,OAAO,WAAWS,SAAS,6CAC5B,CAACT,OAAO,SAASS,SAAS,4CAgKbkB,MA7Jf,SAAcpC,GAAQ,IACbqC,EAAiDrC,EAAjDqC,mBAAmBjB,EAA8BpB,EAA9BoB,YAAYkB,EAAkBtC,EAAlBsC,eADnB,EAEMC,mBAAS,GAFf,mBAEZtC,EAFY,KAENuC,EAFM,OAGcD,mBAAS,GAHvB,mBAGZrC,EAHY,KAGFuC,EAHE,OAIgBF,mBAAS,IAJzB,mBAIZG,EAJY,KAIDC,EAJC,OAKMJ,mBAAS,IALf,mBAKZxB,EALY,KAKN6B,EALM,OAMYL,mBAAS,IANrB,mBAMZM,EANY,KAMHC,EANG,OAOgBP,mBAASF,GAPzB,mBAOZU,EAPY,KAODC,EAPC,KAiDnB,SAASC,EAAUC,EAAKC,GAGtB,IADA,IAAIC,EAAQ,YAAOF,GACVG,EAAID,EAASE,OAAS,EAAGD,EAAI,EAAGA,IAAK,CAC5C,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADE,EAEf,CAACD,EAASG,GAAIH,EAASC,IAAnDD,EAASC,GAFkC,KAE9BD,EAASG,GAFqB,KAK9C,OAAOH,EAASO,MAAM,EAAER,GA7C1BS,qBAAU,WACmB,SAAvBvB,EACyB,IAAvBjB,EAAYkC,OACdjC,EAAa,YAGbA,EAAaD,GAIY,IAAvBA,EAAYkC,QACdV,EAAS,GAAD,OAAKT,IACbW,EAAY,GAAD,OAAKX,KAGhBd,EAAaD,KAKlB,IA4BD,IAAMC,EAAY,uCAAG,WAAOwC,GAAP,uBAAAC,EAAA,sEACWC,MAAM,2CAAD,OAA4CF,IAD5D,8BACuEG,OAAOC,MAAK,SAACC,GAAY,OAAOA,EAASnD,SADhH,OAIK,KAHlBoD,EADa,QAINb,SACLc,EAAkB,GACxBD,EAASE,SAAQ,SAACC,GAAWF,EAAgBG,KAAK,CAAC9D,OAAO6D,EAAQjE,GAAGa,SAASoD,EAAQpD,cACtF4B,EAAYsB,GACNI,EAAiBL,EAASb,QA3DV,MA2D6Da,EAASb,OACtFmB,EAAcxB,EAAUkB,EAASK,GACjCE,EAAc,GACpBD,EAAYJ,SAAQ,SAACM,GAAcD,EAAYH,KAAK,CAAC9D,OAAOkE,EAAWtE,GAAGa,SAASyD,EAAWzD,cAC9F0B,EAAS8B,GACT/B,EAAc,IACdH,EAAS,GACTC,EAAa,IAfI,2CAAH,sDAmFdtC,EAA0B,WAAf4C,EAA0BhC,EAAMuC,OAAST,EAASS,OACjE,OACE,sBAAKlD,UAAU,OAAf,UACE,sBAAKA,UAAY,SAAjB,UACE,qBAAKC,GAAG,OAAOO,IAAKgE,EAAM/D,IAAI,SAC9B,cAAC,EAAD,CAAYZ,MAAOA,EAAOC,UAAWA,EAAWC,SAAUA,IAC1D,cAAC,EAAD,CAAWsB,KAAMzB,EAAMyB,KAAMD,WAAYxB,EAAMwB,WAC7CH,aAAcA,EAAcE,iBAlCX,WACvB,GAAmB,WAAfwB,EACFC,EAAc,QACa,IAAvB5B,EAAYkC,OACdjC,EAAa,YAGbA,EAAaD,QAKf,GADA4B,EAAc,UACa,IAAvB5B,EAAYkC,OAAa,CAC3B,IAAMuB,EAAkB5B,EAAU,GAAD,OAAKd,GAAsBA,EAAqBmB,QACjFV,EAASiC,GACT/B,EAAY+B,GACZlC,EAAc,IACdH,EAAS,GACTC,EAAa,QAGbpB,EAAaD,IAaqDA,YAAaA,EAAaE,oBAAqB,SAACwD,GAAKxC,EAAewC,EAAEC,OAAOpD,aAEjJ,cAAC,EAAD,CAAWZ,MAAOA,EAAOR,WArHV,SAACE,GACbiC,EAAWsC,SAASvE,IAAYiC,EAAWY,QAQ9Cd,EAAS,GACTG,EAAc,MARdA,EAAc,GAAD,mBAAKD,GAAL,CAAgBjC,KAC7B+B,EAASvC,EAAM,GACXA,GAASC,GACXuC,EAAaxC,EAAM,KAgH4BO,QAAwB,WAAfuC,EA1CpC,WACxB,IAAMkC,EAAYhC,EAAUlC,EAAMA,EAAMuC,QACxCV,EAASqC,IAjCa,SAACxE,GAEvB,SAASyE,EAAgB9B,GACvB,GAAI+B,EAAe7B,SAAWT,EAASS,OACrC,OAAO,EAET,IAAK,IAAID,EAAI,EAAGA,EAAID,EAASE,OAAQD,IACnC,IAAK8B,EAAeH,SAAS5B,EAASC,GAAG5C,QACvC,OAAO,EAGX,OAAO,EAOT,IAAI0E,EAAc,YAAOzC,GACpByC,EAAeH,SAASvE,KAC3B0E,EAAc,sBAAOzC,GAAP,CAAkBjC,KAKlC,IADA,IAAI2E,EAAgBnC,EAAUJ,EAAS9B,EAAMuC,SACrC4B,EAAgBE,IACtBA,EAAgBnC,EAAUJ,EAAS9B,EAAMuC,QAE3CV,EAASwC,UChFEC,MAzCf,SAAiBrF,GAAQ,IAChBoB,EAA8BpB,EAA9BoB,YAAYkB,EAAkBtC,EAAlBsC,eADG,EAESC,mBAAS,IAFlB,mBAEfM,EAFe,KAENC,EAFM,KAKtBc,qBAAU,WACmB,IAAvBxC,EAAYkC,OACdjC,EAAa,WAGbA,EAAaD,KAGf,IAEF,IAAMC,EAAY,uCAAG,WAAOwC,GAAP,iBAAAC,EAAA,6DACK,IADL,SAEWC,MAAM,2CAAD,OAA4CF,EAA5C,qBADX,MADL,8BAEmGG,OAAOC,MAAK,SAACC,GAAY,OAAOA,EAASnD,SAF5I,OAKK,KAHlBoD,EAFa,QAKNb,SACLc,EAAkB,GACxBD,EAASE,SAAQ,SAACC,GAAWF,EAAgBG,KAAK,CAAC9D,OAAO6D,EAAQjE,GAAGa,SAASoD,EAAQpD,cACtF4B,EAAYsB,IARK,2CAAH,sDAYlB,OACE,sBAAKhE,UAAU,OAAf,UACE,sBAAKA,UAAY,SAAjB,UACE,qBAAKC,GAAG,OAAOO,IAAKgE,EAAM/D,IAAI,SAC9B,qBAAKR,GAAG,qBAFV,IAGE,cAAC,EAAD,CAAWoB,KAAMzB,EAAMyB,KAAMD,WAAYxB,EAAMwB,WAC7CH,aAAcA,EAAcD,YAAaA,EAAaE,oBAAqB,SAACwD,GAAKxC,EAAewC,EAAEC,OAAOpD,aAG7G,cAAC,EAAD,CAAWZ,MAAO8B,EAAUtC,WAAY,aAAQC,QAAS,mBCJhD8E,MAhCf,WAAgB,IAAD,EACU/C,mBAAS,eADnB,mBACNd,EADM,KACD8D,EADC,OAEsChD,mBAAS,UAF/C,mBAENiD,EAFM,KAEaC,EAFb,OAMwBlD,mBAAS,IANjC,mBAMNnB,EANM,KAMMkB,EANN,KAQPd,EAAa,SAACO,GAClBwD,EAAQxD,GACK,iBAATN,GAAsC,cAAXM,EAC7B0D,EAAsB,QAEN,iBAAThE,GAAsC,gBAAXM,GAClC0D,EAAsB,WAItBC,EACO,iBAATjE,EACE,cAAC,EAAD,CAASL,YAAaA,EAAakB,eAAgBA,EACnDb,KAAMA,EAAMD,WAAYA,IACxB,cAAC,EAAD,CAAMJ,YAAaA,EAAakB,eAAgBA,EAChDb,KAAMA,EAAMD,WAAYA,EAAYa,mBAAoBmD,IAE5D,OACE,qBAAKpF,UAAU,MAAf,SACGsF,KC3BPC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.0a81b88c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Scoreboard(props){\r\n  const {score,highScore,maxScore} = props;\r\n\r\n  return (\r\n    <div className=\"Scoreboard\">\r\n      <h3>Score: {score}</h3>\r\n      <h3 id=\"highScore\">High Score: {highScore}</h3>\r\n      <h3>Max Score: {maxScore}</h3>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Scoreboard;","import React from 'react';\r\n\r\nfunction Card(props){\r\n  const {handleGame,shuffle,cardId,imageSrc} = props;\r\n\r\n  function onClick(){\r\n    handleGame(cardId);\r\n    shuffle(cardId);\r\n  }\r\n  return (\r\n    <div className=\"Card\" onClick={onClick}>\r\n      <img src={imageSrc} alt={cardId}/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card.js';\r\n\r\nfunction CardsGrid(props){\r\n  const {cards,handleGame,shuffle} = props;\r\n  \r\n  return (\r\n    <div className=\"CardsGrid\">\r\n      {cards.map((card)=>(\r\n        <Card imageSrc={card.imageUrl} key={card.cardId} cardId={card.cardId} shuffle={shuffle} handleGame={handleGame}/>\r\n      ))}\r\n    </div>\r\n    \r\n  );\r\n}\r\n\r\nexport default CardsGrid;","import React from 'react';\r\nimport Dropdown from 'react-dropdown';\r\nimport 'react-dropdown/style.css';\r\nimport './SearchBar.css';\r\n\r\nfunction SearchBar(props){\r\n  const {searchValue,handleSearch,onSearchValueChange,changeDifficulty,changeMode,mode} = props;\r\n  const options = [\r\n    'Normal Mode', 'Hard Mode', 'Gallery Mode'\r\n  ];\r\n  // const defaultOption=mode;\r\n\r\n  const onChange = (option)=>{\r\n    if (mode !== option.value){\r\n      changeMode(option.value);\r\n      if (mode !== 'Gallery Mode'){\r\n        changeDifficulty();\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"SearchContainer\">\r\n      <div id=\"searchBarAndButton\">\r\n        <input id=\"searchBar\" type=\"text\" value={searchValue} onChange={onSearchValueChange} placeholder=\"Enter a Pokemon...\"/>\r\n        <button id=\"searchButton\" onClick={()=>{handleSearch(searchValue)}}>\r\n          <i className=\"fas fa-search fa-lg\" aria-hidden=\"true\"></i>\r\n        </button>\r\n      </div>\r\n      <Dropdown onChange={onChange} options={options} value={mode} \r\n        arrowClassName='arrowModeSelect' controlClassName='controlModeSelect' className='modeSelect'/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBar;","export default __webpack_public_path__ + \"static/media/Pokemon.120b8b05.png\";","import React, {useEffect, useState} from 'react';\r\nimport Scoreboard from './Scoreboard.js';\r\nimport CardsGrid from './CardsGrid.js';\r\nimport SearchBar from './SearchBar.js';\r\nimport Logo from './Pokemon.png';\r\n\r\nconst defaultStartingCards =  [\r\n  {cardId:'pl2-114',imageUrl:'https://images.pokemontcg.io/pl2/114.png'},\r\n  {cardId:'swshp-SWSH074',imageUrl:\"https://images.pokemontcg.io/swshp/SWSH074.png\"},\r\n  {cardId:'basep-24',imageUrl:\"https://images.pokemontcg.io/basep/24.png\"},\r\n  {cardId:'basep-25',imageUrl:\"https://images.pokemontcg.io/basep/25.png\"},\r\n  {cardId:'bw11-RC7',imageUrl:\"https://images.pokemontcg.io/bw11/RC7.png\"},\r\n  {cardId:'base4-87',imageUrl:\"https://images.pokemontcg.io/base4/87.png\"},\r\n  {cardId:'basep-27',imageUrl:\"https://images.pokemontcg.io/basep/27.png\"},\r\n  {cardId:'basep-4',imageUrl:\"https://images.pokemontcg.io/basep/4.png\"},\r\n  {cardId:'smp-SM86',imageUrl:\"https://images.pokemontcg.io/smp/SM86.png\"},\r\n  {cardId:'xy1-42',imageUrl:\"https://images.pokemontcg.io/xy1/42.png\"}\r\n];\r\n\r\nfunction Game(props) {\r\n  const {startingDifficulty,searchValue,setSearchValue} = props;\r\n  const [score,setScore] = useState(0);\r\n  const [highScore,setHighScore] = useState(0);\r\n  const [cardsFound,setCardsFound] = useState([]); //Keep track of which cards have been clicked already\r\n  const [cards,setCards] = useState([]); // Keep track of which cards are being displayed\r\n  const [allCards,setAllCards] = useState([]); // Keep track of all cards that were queried\r\n  const [difficulty,setDifficulty] = useState(startingDifficulty);\r\n\r\n  const maxCardsToDisplay = 10;\r\n\r\n  // When the game is first rendered (as the default mode or when switching from gallery mode to normal/hard mode)\r\n  useEffect(()=>{\r\n    if (startingDifficulty === 'hard'){\r\n      if (searchValue.length === 0){ // Search bar is empty\r\n        handleSearch('articuno');\r\n      }\r\n      else {\r\n        handleSearch(searchValue);\r\n      }\r\n    }\r\n    else {\r\n      if (searchValue.length === 0){ // Search bar is empty\r\n        setCards([...defaultStartingCards]);\r\n        setAllCards([...defaultStartingCards]);\r\n      }\r\n      else {\r\n        handleSearch(searchValue);\r\n      }\r\n    }\r\n  }\r\n  //eslint-disable-next-line\r\n  ,[]);\r\n\r\n  // Game logic\r\n  const handleGame = (cardId)=>{\r\n    if (!cardsFound.includes(cardId) || !cardsFound.length){\r\n      setCardsFound([...cardsFound,cardId]);\r\n      setScore(score+1);\r\n      if (score >= highScore){\r\n        setHighScore(score+1);\r\n      }\r\n    }\r\n    else {\r\n      setScore(0);\r\n      setCardsFound([]);\r\n    }\r\n  }\r\n\r\n  function getRandom(arr, n) {\r\n    //Copy the array and shuffle all elements in the copied array\r\n    let shuffled = [...arr];\r\n    for (let i = shuffled.length - 1; i > 0; i--) {\r\n      const j = Math.floor(Math.random() * (i + 1));\r\n      [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];\r\n    }\r\n    //Pick n elements from the shuffled array\r\n    return shuffled.slice(0,n);\r\n  }\r\n\r\n  const handleSearch = async (search)=>{\r\n    const newCards = await (await fetch(`https://api.pokemontcg.io/v1/cards?name=${search}`)).json().then((response)=>{return response.cards});\r\n\r\n    // Reset the game with the newly queried cards if the search is valid\r\n    if (newCards.length !== 0){\r\n      const allQueriedCards = [];\r\n      newCards.forEach((newCard)=>{allQueriedCards.push({cardId:newCard.id,imageUrl:newCard.imageUrl})});\r\n      setAllCards(allQueriedCards);\r\n      const numCardsInGrid= (newCards.length >= maxCardsToDisplay) ? maxCardsToDisplay : newCards.length;\r\n      const randomCards = getRandom(newCards,numCardsInGrid); //Select ten cards\r\n      const cardsInGrid = [];\r\n      randomCards.forEach((randomCard)=>{cardsInGrid.push({cardId:randomCard.id,imageUrl:randomCard.imageUrl})});\r\n      setCards(cardsInGrid);\r\n      setCardsFound([]);\r\n      setScore(0);\r\n      setHighScore(0);\r\n    }\r\n  }\r\n\r\n  const hardModeShuffle = (cardId)=> {\r\n    // Shuffle is valid if there is at least one to-be-displayed card that hasn't been found yet\r\n    function isShuffledValid(shuffled){\r\n      if (cardsFoundCopy.length === allCards.length){\r\n        return true;\r\n      }\r\n      for (let i = 0; i < shuffled.length; i++){\r\n        if (!cardsFoundCopy.includes(shuffled[i].cardId)){\r\n          return true;\r\n        }\r\n      }\r\n      return false;\r\n    }\r\n    // Edge case handling\r\n    // Due to async, setCards is not updated with the newly clicked card when handleGame is called\r\n    // which can lead to to all of the displayed cards having already been found \r\n    // even when there are cards that havent been found yet (i.e. it's not possible to reach the max score)\r\n    // Tried setTimeout(shuffle,0) but it didnt work. Dont know if there is a better hack around this issue.\r\n    let cardsFoundCopy = [...cardsFound]; \r\n    if (!cardsFoundCopy.includes(cardId)){\r\n      cardsFoundCopy = [...cardsFound,cardId];\r\n    }\r\n\r\n    // Shuffle the cards until a valid shuffle is found\r\n    let shuffledCards = getRandom(allCards,cards.length);\r\n    while (!isShuffledValid(shuffledCards)){\r\n      shuffledCards = getRandom(allCards,cards.length);\r\n    }\r\n    setCards(shuffledCards);\r\n  };\r\n\r\n  const normalModeShuffle = ()=> {\r\n    const tempCards = getRandom(cards,cards.length);\r\n    setCards(tempCards);\r\n  };\r\n\r\n  // Switch between normal and hard mode\r\n  const changeDifficulty = ()=>{\r\n    if (difficulty === 'normal'){\r\n      setDifficulty('hard');\r\n      if (searchValue.length === 0){\r\n        handleSearch('articuno');\r\n      }\r\n      else {\r\n        handleSearch(searchValue);\r\n      }\r\n    }\r\n    else {\r\n      setDifficulty('normal');\r\n      if (searchValue.length === 0){\r\n        const shuffledDefault = getRandom([...defaultStartingCards],defaultStartingCards.length);\r\n        setCards(shuffledDefault);\r\n        setAllCards(shuffledDefault);\r\n        setCardsFound([]);\r\n        setScore(0);\r\n        setHighScore(0);\r\n      }\r\n      else {\r\n        handleSearch(searchValue);\r\n      }\r\n    } \r\n\r\n  }\r\n\r\n  let maxScore = difficulty === 'normal' ? cards.length : allCards.length;\r\n  return (\r\n    <div className=\"Game\">\r\n      <div className = 'Header'>\r\n        <img id=\"logo\" src={Logo} alt=\"logo\"/>\r\n        <Scoreboard score={score} highScore={highScore} maxScore={maxScore}/>\r\n        <SearchBar mode={props.mode} changeMode={props.changeMode} \r\n          handleSearch={handleSearch} changeDifficulty={changeDifficulty} searchValue={searchValue} onSearchValueChange={(e)=>{setSearchValue(e.target.value)}} />\r\n      </div>\r\n      <CardsGrid cards={cards} handleGame={handleGame} shuffle={difficulty === 'normal' ? normalModeShuffle : hardModeShuffle}/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Game;\r\n","import React, {useState,useEffect} from 'react';\r\nimport CardsGrid from './CardsGrid.js';\r\nimport SearchBar from './SearchBar.js';\r\nimport Logo from './Pokemon.png';\r\n\r\nfunction Gallery(props) {\r\n  const {searchValue,setSearchValue} = props;\r\n  const [allCards,setAllCards] = useState([]); //Stores the id and image url of all cards in the gallery\r\n\r\n  // On the initial render (when the mode switches from game to gallery), display the default pokemon cards unless there is already text in the search bar\r\n  useEffect(()=>{\r\n    if (searchValue.length === 0){\r\n      handleSearch('umbreon'); //default pokemon to search for\r\n    }\r\n    else {\r\n      handleSearch(searchValue);\r\n    }\r\n  //eslint-disable-next-line\r\n  },[]);\r\n\r\n  const handleSearch = async (search)=>{\r\n    const maxCardsToQuery = 500;\r\n    const newCards = await (await fetch(`https://api.pokemontcg.io/v1/cards?name=${search}&pageSize=${maxCardsToQuery}`)).json().then((response)=>{return response.cards});\r\n    \r\n    // Display new cards in the gallery if the search is valid\r\n    if (newCards.length !== 0){ \r\n      const allQueriedCards = [];\r\n      newCards.forEach((newCard)=>{allQueriedCards.push({cardId:newCard.id,imageUrl:newCard.imageUrl})});\r\n      setAllCards(allQueriedCards);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"Game\">\r\n      <div className = 'Header'>\r\n        <img id=\"logo\" src={Logo} alt=\"logo\"/>\r\n        <div id=\"emptyPlaceholder\"></div> {/* An empty div as a placeholder in the css grid so that the logo and search bar are positioned correctly  */}\r\n        <SearchBar mode={props.mode} changeMode={props.changeMode} \r\n          handleSearch={handleSearch} searchValue={searchValue} onSearchValueChange={(e)=>{setSearchValue(e.target.value)}} />\r\n      </div>\r\n      \r\n      <CardsGrid cards={allCards} handleGame={()=>{}} shuffle={()=>{}}/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Gallery;\r\n","import './App.css';\nimport React,{useState} from 'react';\nimport Game from './Game.js';\nimport Gallery from './Gallery.js';\n\nfunction App() {\n  const [mode,setMode] = useState('Normal Mode');\n  const [gameModeDifficulty,setGameModeDifficulty] = useState('normal');\n\n  // Search value in the search bar is passed down to sub-components \n  // so that the search value persists when different modes are rendered\n  const [searchValue,setSearchValue] = useState(\"\"); \n\n  const changeMode = (option)=>{\n    setMode(option);\n    if (mode === 'Gallery Mode' && option === 'Hard Mode'){\n      setGameModeDifficulty('hard');\n    }\n    else if (mode === 'Gallery Mode' && option === 'Normal Mode'){\n      setGameModeDifficulty('normal');\n    }\n  }\n\n  let modeDisplayed = \n    mode === 'Gallery Mode' \n    ? <Gallery searchValue={searchValue} setSearchValue={setSearchValue} \n      mode={mode} changeMode={changeMode}/> \n    : <Game searchValue={searchValue} setSearchValue={setSearchValue}\n      mode={mode} changeMode={changeMode} startingDifficulty={gameModeDifficulty}/>\n\n  return (\n    <div className=\"App\">\n      {modeDisplayed}\n    </div>  \n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}