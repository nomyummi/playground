{"version":3,"sources":["Scoreboard.js","Card.js","CardsGrid.js","App.js","index.js"],"names":["Scoreboard","props","score","highScore","maxScore","className","Card","handleGame","shuffle","onClick","cardId","src","alt","CardsGrid","cardIds","useState","cards","setCards","tempCards","i","length","j","Math","floor","random","id","a","fetch","json","then","queriedCards","pokemonCard","imageUrl","useEffect","forEach","loadImageFromId","error","console","log","map","card","App","setScore","setHighScore","cardsFound","setCardsFound","setCardIds","charizardIds","cardID","includes","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yOAceA,MAZf,SAAoBC,GAAO,IAClBC,EAA4BD,EAA5BC,MAAMC,EAAsBF,EAAtBE,UAAUC,EAAYH,EAAZG,SAEvB,OACE,sBAAKC,UAAU,aAAf,UACE,yCAAYH,KACZ,6CAAgBC,KAChB,6CAAgBC,S,uBCOPE,MAdf,SAAcL,GAAO,IACZM,EAAsBN,EAAtBM,WAAWC,EAAWP,EAAXO,QAMlB,OACE,qBAAKH,UAAU,OAAOI,QALxB,WACEF,EAAWN,EAAMS,QACjBF,KAGA,SACE,qBAAKG,IAAKV,EAAMU,IAAKC,IAAI,QCoChBC,MA5Cf,SAAmBZ,GAAO,IACjBa,EAAsBb,EAAtBa,QAAQP,EAAcN,EAAdM,WADQ,EAEEQ,mBAAS,IAFX,mBAEhBC,EAFgB,KAEVC,EAFU,KAIjBT,EAAU,WAEd,IADA,IAAMU,EAAS,YAAOF,GACbG,EAAID,EAAUE,OAAS,EAAGD,EAAI,EAAGA,IAAK,CAC3C,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADC,EAEZ,CAACD,EAAUG,GAAIH,EAAUC,IAAvDD,EAAUC,GAFgC,KAE5BD,EAAUG,GAFkB,KAI/CJ,EAASC,IAVY,4CAavB,WAA+BO,GAA/B,eAAAC,EAAA,sEACmCC,MAAM,yCAAD,OAA0CF,IADlF,8BACyFG,OAAOC,MAAK,SAAAC,GAAe,OAAOA,EAAad,MAAM,MAD9I,OACQe,EADR,OAEEd,GAAS,SAAAD,GAAK,4BAAMA,GAAN,CACZ,CAACgB,SAAUD,EAAYC,SACrBtB,OAAQe,QAJd,4CAbuB,sBAkCvB,OAbAQ,qBAAU,WACR,IACEhB,EAAS,IACTH,EAAQoB,SAAQ,SAACxB,IAxBE,oCAyBjByB,CAAgBzB,MAGpB,MAAO0B,GACLC,QAAQC,IAAI,yBAA2BF,MAGzC,CAACtB,IAGD,qBAAKT,UAAU,YAAf,SACGW,EAAMuB,KAAI,SAACC,GAAD,OACT,cAAC,EAAD,CAAM7B,IAAK6B,EAAKR,SAA4BtB,OAAQ8B,EAAK9B,OAAQF,QAASA,EAASD,WAAYA,GAAhEiC,EAAK9B,cCN7B+B,MA7Bf,WAAgB,IAAD,EACY1B,mBAAS,GADrB,mBACNb,EADM,KACAwC,EADA,OAEoB3B,mBAAS,GAF7B,mBAENZ,EAFM,KAEIwC,EAFJ,OAGsB5B,mBAAS,IAH/B,mBAGN6B,EAHM,KAGKC,EAHL,OAIgB9B,mBAAS,CAAC,UAAU,gBAAgB,WAAW,WAAW,WAAW,WAAW,WAAW,UAAU,WAAW,WAJhI,mBAIND,EAJM,KAIEgC,EAJF,KAkBPC,EAAe,CAAC,YAAY,YAAY,SAAS,YAAY,UAAU,UAAU,SAAS,WAAW,UAAU,WAErH,OACE,sBAAK1C,UAAU,MAAf,UACE,wBAAQI,QAAS,kBAAIqC,EAAWC,IAAhC,mCACA,cAAC,EAAD,CAAY7C,MAAOA,EAAOC,UAAWA,EAAWC,SAAUU,EAAQM,SAClE,cAAC,EAAD,CAAWN,QAASA,EAASP,WAnBd,SAACyC,GACbJ,EAAWK,SAASD,IAAYJ,EAAWxB,QAQ9CsB,EAAS,GACTG,EAAc,MARdA,EAAc,GAAD,mBAAKD,GAAL,CAAgBI,KAC7BN,EAASxC,EAAM,GACXA,GAASC,GACXwC,EAAazC,EAAM,WCV3BgD,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.7a58a43e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Scoreboard(props){\r\n  const {score,highScore,maxScore} = props;\r\n\r\n  return (\r\n    <div className=\"Scoreboard\">\r\n      <h3>Score: {score}</h3>\r\n      <h3>High Score:{highScore}</h3>\r\n      <h3>Max Score: {maxScore}</h3>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Scoreboard;","import React from 'react';\r\n\r\nfunction Card(props){\r\n  const {handleGame,shuffle} = props;\r\n\r\n  function onClick(){\r\n    handleGame(props.cardId);\r\n    shuffle();\r\n  }\r\n  return (\r\n    <div className=\"Card\" onClick={onClick}>\r\n      <img src={props.src} alt=\"\"/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Card;","import React, {useState,useEffect} from 'react';\r\nimport Card from './Card.js';\r\n\r\nfunction CardsGrid(props){\r\n  const {cardIds,handleGame} = props;\r\n  const [cards,setCards] = useState([]);\r\n\r\n  const shuffle = ()=> {\r\n    const tempCards = [...cards];\r\n    for (let i = tempCards.length - 1; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * (i + 1));\r\n        [tempCards[i], tempCards[j]] = [tempCards[j], tempCards[i]];\r\n    }\r\n    setCards(tempCards);\r\n  };\r\n\r\n  async function loadImageFromId(id) {\r\n    const pokemonCard = await (await fetch(`https://api.pokemontcg.io/v1/cards?id=${id}`)).json().then(queriedCards=>{return queriedCards.cards[0]});\r\n    setCards(cards=>[...cards,\r\n      {imageUrl: pokemonCard.imageUrl,\r\n        cardId: id}\r\n      ]);\r\n  }\r\n\r\n  useEffect(()=>{\r\n    try {\r\n      setCards([]);\r\n      cardIds.forEach((cardId)=>{\r\n        loadImageFromId(cardId);\r\n      });\r\n    }\r\n    catch (error) {\r\n      console.log('Failed to load image: ' + error);\r\n    }\r\n  // eslint-disable-next-line\r\n  },[cardIds]);\r\n  \r\n  return (\r\n    <div className=\"CardsGrid\">\r\n      {cards.map((card)=>(\r\n        <Card src={card.imageUrl} key={card.cardId} cardId={card.cardId} shuffle={shuffle} handleGame={handleGame}/>\r\n      ))}\r\n    </div>\r\n    \r\n  );\r\n}\r\n\r\nexport default CardsGrid;","import './App.css';\nimport React, {useState} from 'react';\nimport Scoreboard from './Scoreboard.js';\nimport CardsGrid from './CardsGrid.js';\n\nfunction App() {\n  const [score,setScore] = useState(0);\n  const [highScore,setHighScore] = useState(0);\n  const [cardsFound,setCardsFound] = useState([]);\n  const [cardIds,setCardIds] = useState(['pl2-114','swshp-SWSH074','basep-24','basep-25','bw11-RC7','base4-87','basep-27','basep-4','smp-SM86','xy1-42']);\n  const handleGame = (cardID)=>{\n    if (!cardsFound.includes(cardID) || !cardsFound.length){\n      setCardsFound([...cardsFound,cardID]);\n      setScore(score+1);\n      if (score >= highScore){\n        setHighScore(score+1);\n      }\n    }\n    else {\n      setScore(0);\n      setCardsFound([]);\n    }\n  }\n  const charizardIds = ['swsh35-74','xyp-XY121','xy2-69','smp-SM158','sm10-20','sm12-22','sm9-14','ecard1-6','ex3-100','base6-3']; \n\n  return (\n    <div className=\"App\">\n      <button onClick={()=>setCardIds(charizardIds)} >Change to the 2nd set</button>\n      <Scoreboard score={score} highScore={highScore} maxScore={cardIds.length}/>\n      <CardsGrid cardIds={cardIds} handleGame={handleGame}/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}